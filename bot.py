import asyncio
import json
import logging
import qrcode
import random
import re
import aiosqlite
import string
import datetime
from datetime import datetime as dt
from io import BytesIO
from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils import exceptions
from aiogram.types import ParseMode, ContentType
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import exceptions as aiogram_exceptions
from aiogram.dispatcher import FSMContext
from aiogram.utils.callback_data import CallbackData
from logging.handlers import RotatingFileHandler
import aiohttp
import os
import time
from dotenv import load_dotenv
import sys

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
PAYMENTS_TOKEN = os.getenv("PAYMENTS_TOKEN")
BOT_TOKEN = os.getenv("BOT_TOKEN")
LOGIN_URL = os.getenv("LOGIN_URL")
LOGIN_DATA = {"username": os.getenv("LOGIN_USERNAME"), "password": os.getenv("LOGIN_PASSWORD")}
SERVER_IP = os.getenv("SERVER_IP")
SERVER_URL = os.getenv("SERVER_URL")
DATABASE = os.getenv("DATABASE_PATH")
USERSDATABASE = os.getenv("USERSDATABASE_PATH")
ADD_CLIENT_URL = os.getenv("ADD_CLIENT_URL")
ID_1 = os.getenv("ID_1")
ID_2 = os.getenv("ID_2")
ID_3 = os.getenv("ID_3")
CHANNEL_ID = os.getenv("CHANNEL_ID")
ADMIN_ID = [int(id.strip()) for id in os.getenv("ADMIN_ID", "").split(',')] if os.getenv("ADMIN_ID") else []

# –¶–µ–Ω—ã –∏ —Ç–∞—Ä–∏—Ñ—ã
PRICES = [
    types.LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü", amount=int(os.getenv("PRICE_1_MONTH"))),
    types.LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 2 –º–µ—Å—è—Ü–∞", amount=int(os.getenv("PRICE_2_MONTHS"))),
    types.LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤", amount=int(os.getenv("PRICE_6_MONTHS"))),
    types.LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –≥–æ–¥", amount=int(os.getenv("PRICE_1_YEAR")))
]

CHANNEL_LINK = os.getenv("CHANNEL_LINK")
NIK = os.getenv("NIK")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π —Ñ–∞–π–ª–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
file_handler = RotatingFileHandler('bot.log', maxBytes=1000000, backupCount=5)
file_handler.setLevel(logging.INFO)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
file_handler.setFormatter(formatter)
bot_logger = logging.getLogger('bot')
bot_logger.addHandler(file_handler)

class BroadcastStates(StatesGroup):
    waiting_for_message = State()
    waiting_for_cancel = State()

async def check_subscription(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.status not in ['left', 'kicked']
    except exceptions.BadRequest:
        return False

def subscription_required(func):
    async def wrapper(update, *args, **kwargs):
        if isinstance(update, types.Message):
            user_id = update.from_user.id
            message = update
        elif isinstance(update, types.CallbackQuery):
            user_id = update.from_user.id
            message = update.message
        else:
            return await func(update, *args, **kwargs)

        if await check_subscription(user_id):
            return await func(update, *args, **kwargs)
        else:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK))
            keyboard.add(types.InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription"))
            
            message_text = (
                "‚ïî‚ïê‚ïê‚ïê üîí –î–û–°–¢–£–ü –û–ì–†–ê–ù–ò–ß–ï–ù üîí ‚ïê‚ïê‚ïê‚ïó\n\n"
                "üì± <b>–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ VPN –±–æ—Ç—É</b>\n"
                f"‚îî‚îÄ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_ID}\n\n"
                "üåü <b>–ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –ü–û–î–ü–ò–°–ö–ò:</b>\n"
                "‚îú‚îÄ üì¢ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
                "‚îú‚îÄ üíé –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n"
                "‚îú‚îÄ üõ°Ô∏è –°–æ–≤–µ—Ç—ã –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
                "‚îú‚îÄ üéÅ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫—Ü–∏–∏\n"
                "‚îî‚îÄ ‚ö°Ô∏è –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º\n\n"
                "‚ïî‚ïê‚ïê‚ïê ‚ö†Ô∏è –í–ê–ñ–ù–û ‚ö†Ô∏è ‚ïê‚ïê‚ïê‚ïó\n"
                "‚îú‚îÄ –ü–æ–¥–ø–∏—Å–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞\n"
                "‚îî‚îÄ –≠—Ç–æ –∑–∞–π–º–µ—Ç 5 —Å–µ–∫—É–Ω–¥\n\n"
                "üëá <b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:</b>"
            )
            
            if isinstance(update, types.CallbackQuery):
                await update.answer(
                    f"‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {CHANNEL_ID} –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è",
                    show_alert=True
                )
                await update.message.answer(message_text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
            else:
                await message.answer(message_text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
            return False
    return wrapper

@dp.callback_query_handler(lambda c: c.data == 'check_subscription')
async def check_sub(callback_query: types.CallbackQuery):
    if await check_subscription(callback_query.from_user.id):
        await bot.answer_callback_query(callback_query.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        await main_menu(callback_query.message)
    else:
        await bot.answer_callback_query(callback_query.id, "–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.", show_alert=True)

async def initialize_database():
    async with aiosqlite.connect(USERSDATABASE) as db:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –Ω—É–∂–Ω—ã–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏
        await db.execute('''
            CREATE TABLE IF NOT EXISTS users (
                telegram_id INTEGER PRIMARY KEY,
                email TEXT,
                referrer_id INTEGER,
                referral_count INTEGER DEFAULT 0,
                free_configs_count INTEGER DEFAULT 0,
                total_referrals INTEGER DEFAULT 0,
                first_name TEXT,
                username TEXT,
                registration_date TEXT
            )
        ''')
        
        cursor = await db.execute("PRAGMA table_info(users)")
        columns = await cursor.fetchall()
        column_names = [column[1] for column in columns]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã
        if 'referral_count' not in column_names:
            await db.execute('ALTER TABLE users ADD COLUMN referral_count INTEGER DEFAULT 0')
        
        if 'free_configs_count' not in column_names:
            await db.execute('ALTER TABLE users ADD COLUMN free_configs_count INTEGER DEFAULT 0')
        
        if 'total_referrals' not in column_names:
            await db.execute('ALTER TABLE users ADD COLUMN total_referrals INTEGER DEFAULT 0')
            
        if 'first_name' not in column_names:
            await db.execute('ALTER TABLE users ADD COLUMN first_name TEXT')
            
        if 'username' not in column_names:
            await db.execute('ALTER TABLE users ADD COLUMN username TEXT')
            
        if 'registration_date' not in column_names:
            await db.execute('ALTER TABLE users ADD COLUMN registration_date TEXT')
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
            current_time = dt.now().strftime('%Y-%m-%d %H:%M:%S')
            await db.execute('UPDATE users SET registration_date = ? WHERE registration_date IS NULL', (current_time,))
        
        await db.commit()
    bot_logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –±–æ—Ç–∞
class AddClient(StatesGroup):
    WaitingForName = State()
    WaitingForExpiryTime = State()

class GetConfig(StatesGroup):
    EmailInput = State()

class TrialPeriodState(StatesGroup):
    waiting_for_answer = State()

expiry_cb = CallbackData('expiry', 'time')
purchase_cb = CallbackData('purchase', 'action')

async def execute_db_query(db_path, query, params=None):
    try:
        async with aiosqlite.connect(db_path) as db:
            async with db.execute(query, params or ()) as cursor:
                if query.strip().upper().startswith("SELECT"):
                    return await cursor.fetchall()
                else:
                    await db.commit()
                    return cursor.rowcount
    except Exception as e:
        bot_logger.error(f"Database error: {e}")
        raise

class Database:
    def __init__(self, db_path):
        self.db_path = db_path

    async def get_stream_settings(self, email):
        query = """
            SELECT
                i.protocol AS prt,
                i.port AS pot,
                json_extract(i.stream_settings, '$.network') AS net,
                json_extract(i.stream_settings, '$.security') AS secur,
                json_extract(i.stream_settings, '$.realitySettings.settings.publicKey') AS pbk,
                json_extract(i.stream_settings, '$.realitySettings.settings.fingerprint') AS fp,
                json_extract(i.stream_settings, '$.realitySettings.serverNames[0]') AS sni,
                json_extract(i.stream_settings, '$.realitySettings.shortIds[0]') AS sid
            FROM
                inbounds i
            JOIN
                client_traffics ct ON i.id = ct.inbound_id
            WHERE
                ct.email = ?;
        """
        return await execute_db_query(self.db_path, query, (email,))

    async def get_ids_by_email(self, email):
        query = """
            SELECT settings
            FROM inbounds
            WHERE settings LIKE '%"email": "{}"%'""".format(email)
        settings = await execute_db_query(self.db_path, query)
        client_ids = []
        for setting in settings:
            setting_data = json.loads(setting[0])
            for client in setting_data['clients']:
                if client['email'] == email:
                    client_ids.append(client['id'])
        return client_ids

    async def get_client_traffics_by_email(self, email):
        query = """
            SELECT email, up, down, expiry_time, total
            FROM client_traffics
            WHERE email = ?"""
        return await execute_db_query(self.db_path, query, (email,))

async def check_server():
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(SERVER_URL, ssl=False) as response:
                if response.status == 200:
                    return " ‚úÖ –°–ï–†–í–ï–† –ê–ö–¢–ò–í–ï–ù"
                else:
                    return " ‚õîÔ∏è –°–ï–†–í–ï–† –ù–ï–î–û–°–¢–£–ü–ï–ù"
    except aiohttp.ClientError:
        return "‚ö†Ô∏è –û–®–ò–ë–ö–ê –°–û–ï–î–ò–ù–ï–ù–ò–Ø"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏
async def get_main_keyboard(user_id=None):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    if user_id:
        user = await execute_db_query(USERSDATABASE, "SELECT email FROM users WHERE telegram_id=?", (user_id,))
        if not user or not user[0][0]:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ email –ø—É—Å—Ç–æ–π
            keyboard.row(types.KeyboardButton(text="üéÅ –ü–†–û–ë–ù–´–ô –ü–ï–†–ò–û–î ‚Ä¢ 3 –î–ù–Ø"))
    
    keyboard.row(types.KeyboardButton(text="üíé –¢–∞—Ä–∏—Ñ—ã"), types.KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"))
    keyboard.row(types.KeyboardButton(text="üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"), types.KeyboardButton(text="üåê –ü—Ä–∞–≤–∏–ª–∞"))
    keyboard.row(types.KeyboardButton(text="üåü –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"))
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞ —Å –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ–º —Ç–∏–ø–æ–≤
    if user_id and isinstance(ADMIN_ID, list) and user_id in ADMIN_ID:
        keyboard.row(types.KeyboardButton(text="‚öôÔ∏è –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨"))
    
    return keyboard

def get_expiry_time_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="üöÄ 1 –º–µ—Å—è—Ü", callback_data=expiry_cb.new(time="-2592000000")))
    keyboard.add(types.InlineKeyboardButton(text="üåü 2 –º–µ—Å—è—Ü–∞", callback_data=expiry_cb.new(time="-5184000000")))
    keyboard.add(types.InlineKeyboardButton(text="üíé 6 –º–µ—Å—è—Ü–µ–≤", callback_data=expiry_cb.new(time="-15552000000")))
    keyboard.add(types.InlineKeyboardButton(text="üëë 1 –≥–æ–¥", callback_data=expiry_cb.new(time="-31104000000")))
    keyboard.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_tariffs"))
    return keyboard

def get_purchase_keyboard_with_cancel():
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å", callback_data=purchase_cb.new(action="purchase")))
    keyboard.add(types.InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=purchase_cb.new(action="cancel")))
    return keyboard

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞
async def main_menu(message: types.Message, edit: bool = False):
    server_status = await check_server()
    user_name = message.from_user.first_name if message.from_user.first_name else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    welcome_text = (
        "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üåü  YUKI VPN üåü ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n\n"
        f"     {server_status}\n\n"
        "‚ú® <b>–î–û–°–¢–£–ü–ù–´–ï –§–£–ù–ö–¶–ò–ò:</b>\n\n"
        "‚îú‚îÄ üíé –ü—Ä–µ–º–∏—É–º VPN-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
        "‚îú‚îÄ üöÄ –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–∞\n"
        "‚îú‚îÄ üîí –ù–∞–¥—ë–∂–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ\n"
        "‚îî‚îÄ üí´ –ë–æ–Ω—É—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n\n"
        "üõ°Ô∏è <b>–ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:</b>\n\n"
        "‚îú‚îÄ üì± –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n"
        "‚îú‚îÄ ‚ö°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n"
        "‚îú‚îÄ üéØ –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n"
        "‚îî‚îÄ ü§ù –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n\n"
        "üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –º–µ–Ω—é:</b>"
    )

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    keyboard = await get_main_keyboard(message.from_user.id)

    if edit:
        await message.edit_text(welcome_text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    else:
        await message.answer(welcome_text, reply_markup=keyboard, parse_mode=ParseMode.HTML)

# –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é admin_panel
@dp.message_handler(lambda message: message.text == "‚öôÔ∏è –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨")
async def admin_panel(message: types.Message):
    if message.from_user.id not in ADMIN_ID:
        return
        
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="üì¢ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="start_broadcast"))
    keyboard.add(types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞", callback_data="bot_stats"))
    keyboard.add(types.InlineKeyboardButton(text="üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="users_list"))
    keyboard.add(types.InlineKeyboardButton(text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data="send_to_user"))
    keyboard.add(types.InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞", callback_data="restart_bot"))
    
    await message.answer(
        "‚ïî‚ïê‚ïê‚ïê ‚öôÔ∏è –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ‚öôÔ∏è ‚ïê‚ïê‚ïê‚ïó\n\n"
        "üë®‚Äçüíª <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–û–¢–û–ú:</b>\n\n"
        "‚îú‚îÄ üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "‚îú‚îÄ üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
        "‚îú‚îÄ üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚îú‚îÄ ‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "‚îî‚îÄ üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞
@dp.callback_query_handler(lambda c: c.data == "restart_bot")
async def restart_bot(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in ADMIN_ID:
        await callback_query.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        await callback_query.answer("üîÑ –ë–æ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω...", show_alert=True)
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin"))
        
        await callback_query.message.edit_text(
            "‚ïî‚ïê‚ïê‚ïê üîÑ –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê ‚ïê‚ïê‚ïê‚ïó\n\n"
            "‚è≥ <b>–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...</b>\n\n"
            "‚îú‚îÄ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö\n"
            "‚îú‚îÄ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞\n"
            "‚îî‚îÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã\n\n"
            "‚ö†Ô∏è <i>–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥</i>",
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º sudo –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è (—Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ sudoers)
        restart_command = ['sudo', 'systemctl', 'restart', 'bot.service']
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        process = await asyncio.create_subprocess_exec(
            *restart_command,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
        stdout, stderr = await process.communicate()
        
        if process.returncode == 0:
            # –£—Å–ø–µ—à–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
            await callback_query.message.edit_text(
                "‚ïî‚ïê‚ïê‚ïê ‚úÖ –ì–û–¢–û–í–û ‚ïê‚ïê‚ïê‚ïó\n\n"
                "<b>–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!</b>\n\n"
                "‚îú‚îÄ –°–ª—É–∂–±–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞\n"
                "‚îî‚îÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ",
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
            )
        else:
            # –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
            error_msg = stderr.decode() if stderr else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
            bot_logger.error(f"Error restarting bot service: {error_msg}")
            raise Exception(error_msg)
            
    except Exception as e:
        bot_logger.error(f"Error in restart_bot: {e}")
        error_keyboard = types.InlineKeyboardMarkup()
        error_keyboard.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_to_admin"))
        
        await callback_query.message.edit_text(
            "‚ïî‚ïê‚ïê‚ïê ‚ùå –û–®–ò–ë–ö–ê ‚ïê‚ïê‚ïê‚ïó\n\n"
            "<b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞</b>\n\n"
            "‚îú‚îÄ –ü—Ä–∏—á–∏–Ω–∞: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞\n"
            "‚îî‚îÄ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
            reply_markup=error_keyboard,
            parse_mode=ParseMode.HTML
        )

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
class AdminStates(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_message_to_user = State()
    
# –î–æ–±–∞–≤–ª—è–µ–º CallbackData –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
user_info_cb = CallbackData('user_info', 'action', 'id')
send_to_user_cb = CallbackData('send', 'action', 'user_id')
users_page_cb = CallbackData('users', 'action', 'page')

@dp.callback_query_handler(lambda c: c.data == "users_list")
async def show_users_list(callback_query: types.CallbackQuery, page: int = 0):
    if callback_query.from_user.id not in ADMIN_ID:
        await callback_query.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
        
    try:
        timestamp = int(time.time())
        total_users = await execute_db_query(USERSDATABASE, "SELECT COUNT(*) FROM users")
        total_users = total_users[0][0] if total_users else 0
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        users = await execute_db_query(USERSDATABASE, """
            SELECT telegram_id, email, referrer_id, referral_count, 
                   free_configs_count, total_referrals, first_name, username 
            FROM users 
            ORDER BY telegram_id DESC 
            LIMIT 10 OFFSET ?
        """, (page * 10,))
        
        text = (
            "‚ïî‚ïê‚ïê‚ïê üë• –°–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô üë• ‚ïê‚ïê‚ïê‚ïó\n\n"
            f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page + 1}/{(total_users + 9) // 10}\n"
            f"üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {dt.fromtimestamp(timestamp).strftime('%H:%M:%S')}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"
        )

        keyboard = types.InlineKeyboardMarkup(row_width=1)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for i, user in enumerate(users, 1):
            telegram_id, email, referrer_id, ref_count, free_conf, total_refs, first_name, username = user
            display_name = first_name or username or f"User {telegram_id}"
            keyboard.add(
                types.InlineKeyboardButton(
                    f"üë§ {display_name} | ID: {telegram_id}",
                    callback_data=user_info_cb.new(action='info', id=telegram_id)
                )
            )

        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_row = []
        if page > 0:
            nav_row.append(types.InlineKeyboardButton(
                "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=users_page_cb.new(action='prev', page=page-1)
            ))
        if len(users) == 10:
            nav_row.append(types.InlineKeyboardButton(
                "–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=users_page_cb.new(action='next', page=page+1)
            ))
        if nav_row:
            keyboard.row(*nav_row)

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard.add(types.InlineKeyboardButton(
            "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=users_page_cb.new(action='refresh', page=page)
        ))
        keyboard.add(types.InlineKeyboardButton(
            "üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin"
        ))

        await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
        await callback_query.answer()

    except Exception as e:
        bot_logger.error(f"Error in show_users_list: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=True)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
send_to_user_cb = CallbackData('send', 'action', 'user_id')

# –ò–∑–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ show_user_info
# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
@dp.callback_query_handler(user_info_cb.filter(action='info'), state='*')
async def show_user_info(callback_query: types.CallbackQuery, callback_data: dict, state: FSMContext):
    if callback_query.from_user.id not in ADMIN_ID:
        await callback_query.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–≥–æ
    current_state = await state.get_state()
    if current_state:
        await state.finish()

    try:
        user_id = int(callback_data['id'])
        user = await execute_db_query(USERSDATABASE, """
            SELECT telegram_id, email, referrer_id, referral_count, 
                   free_configs_count, total_referrals, first_name, username,
                   registration_date
            FROM users 
            WHERE telegram_id = ?
        """, (user_id,))
        
        if not user:
            await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        user = user[0]
        telegram_id, email, referrer_id, ref_count, free_conf, total_refs, first_name, username, reg_date = user
        
        text = (
            f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n"
            f"üÜî ID: <code>{telegram_id}</code>\n"
            f"üìù –ò–º—è: {first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üë§ Username: @{username or '–ù–µ—Ç'}\n"
            f"üìß Email: {email or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {total_refs}\n"
            f"üéÅ –ë–æ–Ω—É—Å–æ–≤: {free_conf}\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_date or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            f"üîó –†–µ—Ñ–µ—Ä–µ—Ä: {referrer_id or '–ù–µ—Ç'}"
        )

        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            types.InlineKeyboardButton(
                "‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å", 
                callback_data=send_to_user_cb.new(action='write', user_id=user_id)
            ),
            types.InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É", callback_data="users_list")
        )

        await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
        await callback_query.answer()

    except Exception as e:
        bot_logger.error(f"Error in show_user_info: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ", show_alert=True)

class AdminStates(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_message_to_user = State()

user_info_cb = CallbackData('user_info', 'action', 'id')
send_to_user_cb = CallbackData('send', 'action', 'user_id')
# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.callback_query_handler(send_to_user_cb.filter(action='write'))
async def start_write_to_user(callback_query: types.CallbackQuery, callback_data: dict):
    if callback_query.from_user.id not in ADMIN_ID:
        await callback_query.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    user_id = int(callback_data['user_id'])
    
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton(
            "üîô –ù–∞–∑–∞–¥", 
            callback_data=user_info_cb.new(action='info', id=user_id)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å
        )
    )
    
    await callback_query.message.edit_text(
        "‚úâÔ∏è <b>–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</b>\n\n"
        f"üìù –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID: {user_id}\n"
        "<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥</i>",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    
    await AdminStates.waiting_for_message_to_user.set()
    state = dp.current_state(user=callback_query.from_user.id)
    await state.update_data(target_user_id=user_id)

@dp.message_handler(state=AdminStates.waiting_for_message_to_user)
async def process_message_to_user(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_ID:
        return
    
    async with state.proxy() as data:
        target_user_id = data.get('target_user_id')
    
    try:
        await bot.send_message(target_user_id, 
            f"üì® <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n{message.text}",
            parse_mode=ParseMode.HTML
        )
        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        await state.finish()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await show_users_list(message, page=0)
        
    except Exception as e:
        bot_logger.error(f"Error sending message to user: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        await state.finish()

@dp.callback_query_handler(users_page_cb.filter())
async def process_users_page(callback_query: types.CallbackQuery, callback_data: dict):
    if callback_query.from_user.id not in ADMIN_ID:
        await callback_query.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    action = callback_data['action']
    page = int(callback_data['page'])

    if action in ['next', 'prev', 'refresh']:
        await show_users_list(callback_query, page)

@dp.callback_query_handler(lambda c: c.data == "send_to_user")
async def start_send_to_user(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in ADMIN_ID:
        await callback_query.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin"))
    
    await callback_query.message.edit_text(
        "‚úâÔ∏è <b>–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
        "<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥</i>",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    await AdminStates.waiting_for_user_id.set()

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö AdminStates
@dp.callback_query_handler(lambda c: c.data == "back_to_admin", state=[AdminStates.waiting_for_user_id, AdminStates.waiting_for_message_to_user])
async def back_to_admin_from_send(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id not in ADMIN_ID:
        await callback_query.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="üì¢ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="start_broadcast"))
    keyboard.add(types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞", callback_data="bot_stats"))
    keyboard.add(types.InlineKeyboardButton(text="üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="users_list"))
    keyboard.add(types.InlineKeyboardButton(text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data="send_to_user"))
    keyboard.add(types.InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞", callback_data="restart_bot"))
    
    await callback_query.message.edit_text(
        "‚ïî‚ïê‚ïê‚ïê ‚öôÔ∏è –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ‚öôÔ∏è ‚ïê‚ïê‚ïê‚ïó\n\n"
        "üë®‚Äçüíª <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–û–¢–û–ú:</b>\n\n"
        "‚îú‚îÄ üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "‚îú‚îÄ üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
        "‚îú‚îÄ üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚îú‚îÄ ‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "‚îî‚îÄ üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    await callback_query.answer()

@dp.message_handler(state=AdminStates.waiting_for_user_id)
async def process_user_id(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_ID:
        return
    
    try:
        user_id = int(message.text)
        user = await execute_db_query(USERSDATABASE, "SELECT telegram_id FROM users WHERE telegram_id = ?", (user_id,))
        
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        await state.update_data(target_user_id=user_id)
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin"))
        
        await message.answer(
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω (ID: {user_id})\n"
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:",
            reply_markup=keyboard
        )
        await AdminStates.waiting_for_message_to_user.set()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        bot_logger.error(f"Error in process_user_id: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.message_handler(state=AdminStates.waiting_for_message_to_user)
async def send_message_to_user(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_ID:
        return
    
    async with state.proxy() as data:
        user_id = data['target_user_id']
    
    try:
        await bot.send_message(
            user_id,
            f"üì® <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n{message.text}",
            parse_mode=ParseMode.HTML
        )
        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        bot_logger.error(f"Error sending message to user {user_id}: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == "bot_stats")
async def show_bot_stats(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in ADMIN_ID:
        await callback_query.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        total_users = await execute_db_query(USERSDATABASE, "SELECT COUNT(*) FROM users")
        total_users = total_users[0][0] if total_users else 0

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å email)
        active_users = await execute_db_query(USERSDATABASE, "SELECT COUNT(*) FROM users WHERE email IS NOT NULL AND email != ''")
        active_users = active_users[0][0] if active_users else 0

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        total_referrals = await execute_db_query(USERSDATABASE, "SELECT SUM(total_referrals) FROM users")
        total_referrals = total_referrals[0][0] if total_referrals and total_referrals[0][0] else 0

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–¥–∞–Ω–Ω—ã—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        free_configs = await execute_db_query(USERSDATABASE, "SELECT SUM(free_configs_count) FROM users")
        free_configs = free_configs[0][0] if free_configs and free_configs[0][0] else 0

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        timestamp = int(time.time())
        
        stats_text = (
            "‚ïî‚ïê‚ïê‚ïê üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê üìä ‚ïê‚ïê‚ïê‚ïó\n\n"
            f"üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}\n"
            f"‚úÖ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {active_users}\n"
            f"ü§ù <b>–í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> {total_referrals}\n"
            f"üéÅ <b>–í—ã–¥–∞–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π:</b> {free_configs}\n\n"
            f"üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {dt.fromtimestamp(timestamp).strftime('%H:%M:%S')}"
        )

        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"bot_stats"))
        keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin"))

        try:
            await callback_query.message.edit_text(
                stats_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
            )
        except aiogram_exceptions.MessageNotModified:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await callback_query.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞", show_alert=False)
        else:
            await callback_query.answer()

    except Exception as e:
        bot_logger.error(f"Error in show_bot_stats: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

@dp.callback_query_handler(lambda c: c.data == "back_to_admin")
async def back_to_admin_panel(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in ADMIN_ID:
        await callback_query.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="üì¢ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="start_broadcast"))
    keyboard.add(types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞", callback_data="bot_stats"))
    keyboard.add(types.InlineKeyboardButton(text="üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="users_list"))
    keyboard.add(types.InlineKeyboardButton(text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data="send_to_user"))
    keyboard.add(types.InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞", callback_data="restart_bot"))
    
    await callback_query.message.edit_text(
        "‚ïî‚ïê‚ïê‚ïê ‚öôÔ∏è –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ‚öôÔ∏è ‚ïê‚ïê‚ïê‚ïó\n\n"
        "üë®‚Äçüíª <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–û–¢–û–ú:</b>\n\n"
        "‚îú‚îÄ üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "‚îú‚îÄ üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
        "‚îú‚îÄ üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚îú‚îÄ ‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "‚îî‚îÄ üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    await callback_query.answer()

@dp.message_handler(lambda message: message.text == "üåü –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
@subscription_required
async def handle_referral_program(message: types.Message, **kwargs):
    await message.delete()
    try:
        user_id = message.from_user.id
        referral_link = await get_referral_link(user_id)
        total_referrals = await get_total_referrals(user_id)
        
        discount = min(total_referrals * 3, 20) 
        
        free_configs = await get_available_free_configs(user_id)
        
        text = (
            "‚ïî‚ïê üëë –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê üëë ‚ïê‚ïó\n\n"
            "üìä <b>–í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>\n"
            f"‚îú‚îÄ üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {total_referrals}\n"
            f"‚îú‚îÄ üíé –¢–µ–∫—É—â–∞—è —Å–∫–∏–¥–∫–∞: {discount}%\n"
            f"‚îî‚îÄ üéÅ –î–æ—Å—Ç—É–ø–Ω–æ –±–æ–Ω—É—Å–æ–≤: {free_configs}\n\n"
            "üåü <b>–ë–û–ù–£–°–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê:</b>\n"
            "‚îú‚îÄ üí∞ +3% —Å–∫–∏–¥–∫–∏ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞\n"
            "‚îú‚îÄ ‚≠êÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞: 20%\n"
            "‚îú‚îÄ üéØ –ö–∞–∂–¥—ã–µ 5 –¥—Ä—É–∑–µ–π = 1 –∫–æ–Ω—Ñ–∏–≥\n"
            "‚îî‚îÄ üì¶ –ë–æ–Ω—É—Å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥: 5 –ì–ë\n\n"
            "üîó <b>–í–ê–®–ê –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–°–´–õ–ö–ê:</b>\n"
            f"‚îî‚îÄ <code>{referral_link}</code>\n\n"
            "üí´ <i>–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!</i>"
        )
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            text="üöÄ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å",
            switch_inline_query=f"üîí –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π VPN! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –ø–æ –º–æ–µ–π —Å—Å—ã–ª–∫–µ: {referral_link}"
        ))
        if free_configs > 0:
            keyboard.add(types.InlineKeyboardButton(text="üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥", callback_data="get_free_config"))
        
        await message.answer(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    except Exception as e:
        bot_logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_referral_program: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def get_available_free_configs(user_id):
    async with aiosqlite.connect(USERSDATABASE) as db:
        cursor = await db.execute('SELECT referral_count, free_configs_count FROM users WHERE telegram_id = ?', (user_id,))
        result = await cursor.fetchone()
        if result:
            referral_count, free_configs_count = result
            available_configs = (referral_count // 5) - free_configs_count
            return max(0, available_configs)
        return 0

async def apply_referral_discount(user_id, price):
    discount = await get_referral_discount(user_id)
    discounted_price = price * (1 - discount / 100)
    return round(discounted_price)

async def get_total_referrals(user_id):
    async with aiosqlite.connect(USERSDATABASE) as db:
        cursor = await db.execute('SELECT total_referrals FROM users WHERE telegram_id = ?', (user_id,))
        result = await cursor.fetchone()
        return result[0] if result else 0

@dp.callback_query_handler(purchase_cb.filter(action="purchase"), state=AddClient.WaitingForExpiryTime)
async def purchase_subscription(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        name = data['name']
        expiry_time = data['expiry_time']

    expiry_time_text = get_expiry_time_description(expiry_time)
    price_index = {"-2592000000": 0, "-5184000000": 1, "-15552000000": 2, "-31104000000": 3}[str(expiry_time)]
    original_price = PRICES[price_index].amount
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–∫–∏–¥–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    discount_percent = await get_referral_discount(callback_query.from_user.id)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É
    discounted_price = int(original_price * (1 - discount_percent / 100))
    
    bot_logger.info(f"Original price: {original_price}, Discount: {discount_percent}%, Discounted price: {discounted_price}")

    invoice_payload = json.dumps({"name": name, "expiry_time": expiry_time})
    
    await bot.send_invoice(
        callback_query.from_user.id,
        title=f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è {name} –Ω–∞ {expiry_time_text}",
        description=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {expiry_time_text} —Å–æ —Å–∫–∏–¥–∫–æ–π {discount_percent}%",
        provider_token=PAYMENTS_TOKEN,
        currency="rub",
        prices=[types.LabeledPrice(label=f"–ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π {discount_percent}%", amount=discounted_price)],
        start_parameter=f"vpn_subscription_{callback_query.from_user.id}_{expiry_time}",
        payload=invoice_payload
    )
    await callback_query.answer()
    await bot.send_message(callback_query.from_user.id, "‚ö†Ô∏è –û—à–∏–±–ª–∏—Å—å? –ù–µ –æ–ø–ª–∞—á–∏–≤–∞–π—Ç–µ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'copy_referral_link')
async def copy_referral_link(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    referral_link = await get_referral_link(user_id)
    
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", switch_inline_query=f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞—à–µ–º—É VPN —Å–µ—Ä–≤–∏—Å—É! {referral_link}"))
    
    await callback_query.answer()
    await callback_query.message.answer(
        f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n<code>{referral_link}</code>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É —Å—Å—ã–ª–∫—É –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –µ—é.",
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data == 'get_free_config')
async def get_free_config(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    available_configs = await get_available_free_configs(user_id)
    
    if available_configs > 0:
        config_name = await create_free_config(user_id)
        if config_name:
            await callback_query.message.answer("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π VPN-–∫–æ–Ω—Ñ–∏–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! üöÄ")
            await send_config(callback_query.message, config_name)
            await update_free_configs_count(user_id)
            new_discount = await get_referral_discount(user_id)
            await callback_query.answer(f"üéâ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω! –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Å–∫–∏–¥–∫–∞: {new_discount}%", show_alert=True)
        else:
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
    else:
        await callback_query.answer(f"–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π. –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π!", show_alert=True)

async def update_free_configs_count(user_id):
    async with aiosqlite.connect(USERSDATABASE) as db:
        await db.execute('UPDATE users SET free_configs_count = free_configs_count + 1 WHERE telegram_id = ?', (user_id,))
        await db.commit()

async def reduce_free_configs_count(user_id):
    async with aiosqlite.connect(USERSDATABASE) as db:
        cursor = await db.execute('SELECT referral_count FROM users WHERE telegram_id = ?', (user_id,))
        result = await cursor.fetchone()
        if result:
            current_referral_count = result[0]
            free_configs_count = current_referral_count // 5
            new_free_configs_count = max(free_configs_count - 1, 0)
            new_referral_count = current_referral_count - (free_configs_count - new_free_configs_count) * 5
            await db.execute('UPDATE users SET referral_count = ? WHERE telegram_id = ?', (new_referral_count, user_id))
            await db.commit()
            bot_logger.info(f"–£–º–µ–Ω—å—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –ë—ã–ª–æ: {free_configs_count}, —Å—Ç–∞–ª–æ: {new_free_configs_count}")
        else:
            bot_logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

async def get_referral_count(user_id):
    async with aiosqlite.connect(USERSDATABASE) as db:
        cursor = await db.execute('SELECT referral_count FROM users WHERE telegram_id = ?', (user_id,))
        result = await cursor.fetchone()
        return result[0] if result else 0

async def get_referral_link(user_id):
    bot_info = await bot.get_me()
    link = f"https://t.me/{bot_info.username}?start={user_id}"
    bot_logger.info(f"Generated referral link for user {user_id}: {link}")
    return link

async def create_free_config(user_id):
    config_name = f"free_config_{user_id}_{int(time.time())}"
    expiry_time = -259200000  # 3 –¥–Ω—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    total_gb = 5 * 1024 ** 3  # 5 –ì–ë –≤ –±–∞–π—Ç–∞—Ö
    
    session_id = await login()
    if session_id:
        client_id = ''.join(random.choices(string.ascii_letters + string.digits, k=20))
        id_vless = ID_3  
        
        settings = {
            "clients": [{
                "id": str(client_id),
                "alterId": 0,
                "flow": "xtis-rprx-vision",
                "email": str(config_name),
                "limitIp": 3,
                "totalGB": total_gb,
                "expiryTime": expiry_time,
                "enable": True,
                "tgId": "",
                "subId": ""
            }]
        }
        
        client_data = {
            "id": int(id_vless),
            "settings": json.dumps(settings)
        }

        headers = {
            "Accept": "application/json",
            "Content-Type": "application/json",
            "Cookie": f"3x-ui={session_id}"
        }

        async with aiohttp.ClientSession() as session:
            async with session.post(ADD_CLIENT_URL, headers=headers, json=client_data, ssl=False) as response:
                if response.status == 200:
                    response_json = await response.json()
                    if response_json.get("success"):
                        try:
                            existing_user = await execute_db_query(USERSDATABASE, "SELECT email FROM users WHERE telegram_id = ?", (user_id,))
                            if existing_user:
                                current_email = existing_user[0][0]
                                new_email = f"{current_email},{config_name}" if current_email else config_name
                                await execute_db_query(USERSDATABASE, "UPDATE users SET email = ? WHERE telegram_id = ?", (new_email, user_id))
                            else:
                                await execute_db_query(USERSDATABASE, "INSERT INTO users (telegram_id, email) VALUES (?, ?)", (user_id, config_name))
                            return config_name
                        except Exception as e:
                            bot_logger.error(f"Error updating/inserting user data: {e}")
                            return None
                    else:
                        bot_logger.error(f"Failed to add client: {response_json.get('msg')}")
                        return None
                else:
                    bot_logger.error(f"Failed to add client. Status: {response.status}")
                    return None
    else:
        bot_logger.error("Failed to login")
        return None

async def update_referral_count(referrer_id):
    try:
        async with aiosqlite.connect(USERSDATABASE) as db:
            cursor = await db.execute('SELECT referral_count, total_referrals FROM users WHERE telegram_id = ?', (referrer_id,))
            before = await cursor.fetchone()
            await db.execute('''
                UPDATE users 
                SET referral_count = referral_count + 1,
                    total_referrals = total_referrals + 1
                WHERE telegram_id = ?
            ''', (referrer_id,))
            await db.commit()
            cursor = await db.execute('SELECT referral_count, total_referrals FROM users WHERE telegram_id = ?', (referrer_id,))
            after = await cursor.fetchone()
            bot_logger.info(f"Referral count updated for user {referrer_id}. Before: {before}, After: {after}")
    except Exception as e:
        bot_logger.error(f"Error updating referral count for user {referrer_id}: {e}")

async def get_referral_discount(user_id):
    try:
        total_referrals = await get_total_referrals(user_id)
        if total_referrals is None:
            bot_logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return 0
        
        discount = min(total_referrals * 3, 20)  # 3% –∑–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞, –º–∞–∫—Å–∏–º—É–º 20%
        bot_logger.info(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ —Å–∫–∏–¥–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {discount}% (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {total_referrals})")
        return discount
    except Exception as e:
        bot_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å–∫–∏–¥–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return 0

@dp.message_handler(commands=['start'])
async def start(message: types.Message, **kwargs):
    user_id = message.from_user.id
    referrer_id = message.get_args()
    current_time = dt.now().strftime('%Y-%m-%d %H:%M:%S')
    
    bot_logger.info(f"Start command received. User ID: {user_id}, Referrer ID: {referrer_id}")
    
    async with aiosqlite.connect(USERSDATABASE) as db:
        cursor = await db.execute('SELECT referrer_id FROM users WHERE telegram_id = ?', (user_id,))
        existing_user = await cursor.fetchone()
        
        if not existing_user:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if referrer_id and referrer_id.isdigit() and int(referrer_id) != user_id:
                referrer_id = int(referrer_id)
                await db.execute('''
                    INSERT INTO users (
                        telegram_id, referrer_id, first_name, username, registration_date
                    ) VALUES (?, ?, ?, ?, ?)
                ''', (
                    user_id, 
                    referrer_id,
                    message.from_user.first_name,
                    message.from_user.username,
                    current_time
                ))
                await db.commit()
                await update_referral_count(referrer_id)
                bot_logger.info(f"New user {user_id} added with referrer {referrer_id}")
                try:
                    await bot.send_message(referrer_id, 
                        "‚ïî‚ïê‚ïê‚ïê üéâ –ù–û–í–´–ô –†–ï–§–ï–†–ê–õ! üéâ ‚ïê‚ïê‚ïê‚ïó\n\n"
                        "üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è\n"
                        "üíé –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!\n\n"
                        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê",
                        parse_mode=ParseMode.HTML
                    )
                except Exception as e:
                    bot_logger.error(f"Failed to send message to referrer {referrer_id}: {e}")
            else:
                await db.execute('''
                    INSERT INTO users (
                        telegram_id, first_name, username, registration_date
                    ) VALUES (?, ?, ?, ?)
                ''', (
                    user_id,
                    message.from_user.first_name,
                    message.from_user.username,
                    current_time
                ))
                await db.commit()
                bot_logger.info(f"New user {user_id} added without referrer")

    if await check_subscription(user_id):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª
        keyboard = await get_main_keyboard(user_id)
        server_status = await check_server()
        
        welcome_text = (
            "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üåü  YUKI VPN üåü ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n\n"
            f"     {server_status}\n\n"
            "‚ú® <b>–î–û–°–¢–£–ü–ù–´–ï –§–£–ù–ö–¶–ò–ò:</b>\n\n"
            "‚îú‚îÄ üíé –ü—Ä–µ–º–∏—É–º VPN-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
            "‚îú‚îÄ üöÄ –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–∞\n"
            "‚îú‚îÄ üîí –ù–∞–¥—ë–∂–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ\n"
            "‚îî‚îÄ üí´ –ë–æ–Ω—É—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n\n"
            "üõ°Ô∏è <b>–ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:</b>\n\n"
            "‚îú‚îÄ üì± –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n"
            "‚îú‚îÄ ‚ö°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n"
            "‚îú‚îÄ üéØ –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n"
            "‚îî‚îÄ ü§ù –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n\n"
            "üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –º–µ–Ω—é:</b>"
        )
        
        await message.answer(welcome_text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    else:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK))
        keyboard.add(types.InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription"))

        message_text = (
            "‚ïî‚ïê‚ïê‚ïê üîí –î–û–°–¢–£–ü –û–ì–†–ê–ù–ò–ß–ï–ù üîí ‚ïê‚ïê‚ïê‚ïó\n\n"
            "üì± <b>–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ VPN –±–æ—Ç—É</b>\n"
            f"‚îî‚îÄ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_ID}\n\n"
            "üåü <b>–ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –ü–û–î–ü–ò–°–ö–ò:</b>\n"
            "‚îú‚îÄ üì¢ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
            "‚îú‚îÄ üíé –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n"
            "‚îú‚îÄ üõ°Ô∏è –°–æ–≤–µ—Ç—ã –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
            "‚îú‚îÄ üéÅ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫—Ü–∏–∏\n"
            "‚îî‚îÄ ‚ö°Ô∏è –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º\n\n"
            "‚ïî‚ïê‚ïê‚ïê ‚ö†Ô∏è –í–ê–ñ–ù–û ‚ö†Ô∏è ‚ïê‚ïê‚ïê‚ïó\n"
            "‚îú‚îÄ –ü–æ–¥–ø–∏—Å–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞\n"
            "‚îî‚îÄ –≠—Ç–æ –∑–∞–π–º–µ—Ç 5 —Å–µ–∫—É–Ω–¥\n\n"
            "üëá <b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:</b>"
        )
        
        await message.answer(message_text, reply_markup=keyboard, parse_mode=ParseMode.HTML)


@dp.callback_query_handler(lambda c: c.data == 'check_subscription')
async def check_sub(callback_query: types.CallbackQuery):
    if await check_subscription(callback_query.from_user.id):
        await bot.answer_callback_query(callback_query.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        await main_menu(callback_query.message)
    else:
        await bot.answer_callback_query(callback_query.id, "–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.", show_alert=True)

@dp.callback_query_handler(lambda c: c.data == "start_broadcast")
async def broadcast_command(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in ADMIN_ID:
        await callback_query.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
        
    await callback_query.message.answer(
        "‚ïî‚ïê‚ïê‚ïê üì¢ –†–ê–°–°–´–õ–ö–ê üì¢ ‚ïê‚ïê‚ïê‚ïó\n\n"
        "‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏\n"
        "‚îî‚îÄ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML —Ä–∞–∑–º–µ—Ç–∫–∞\n\n"
        "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ /cancel"
    )
    await BroadcastStates.waiting_for_message.set()
    await callback_query.answer()

# –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:
class BroadcastStates(StatesGroup):
    waiting_for_message = State()

# –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:
@dp.message_handler(state=BroadcastStates.waiting_for_message)
async def process_broadcast_message(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_ID:
        return
        
    if message.text == "/cancel":
        await state.finish()
        await message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
        
    progress_msg = await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    success = 0
    fail = 0

    async with aiosqlite.connect(USERSDATABASE) as db:
        async with db.execute('SELECT telegram_id FROM users') as cursor:
            users = await cursor.fetchall()
            
            for user in users:
                try:
                    await bot.send_message(
                        user[0],
                        message.text,
                        parse_mode=ParseMode.HTML
                    )
                    success += 1
                except Exception as e:
                    fail += 1
                    bot_logger.error(f"Failed to send broadcast to {user[0]}: {e}")
                
                if (success + fail) % 25 == 0:  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 25 —Å–æ–æ–±—â–µ–Ω–∏–π
                    await progress_msg.edit_text(
                        f"‚è≥ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success + fail}/{len(users)}\n"
                        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n"
                        f"‚ùå –û—à–∏–±–æ–∫: {fail}"
                    )
    
    await progress_msg.edit_text(
        "‚ïî‚ïê‚ïê‚ïê üìä –ò–¢–û–ì–ò –†–ê–°–°–´–õ–ö–ò üìä ‚ïê‚ïê‚ïê‚ïó\n\n"
        f"üì® –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success + fail}\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {fail}"
    )
    
    await state.finish()

@dp.message_handler(lambda message: message.text == "üíé –¢–∞—Ä–∏—Ñ—ã")
@subscription_required
async def handle_tariffs_and_purchase(message: types.Message, **kwargs):
    await message.delete()
    await show_tariffs_and_purchase(message)

@dp.message_handler(lambda message: message.text == "üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
@subscription_required
async def handle_instructions(message: types.Message, **kwargs):
    await message.delete()
    await show_instructions(message)

@dp.message_handler(lambda message: message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
@subscription_required
async def handle_get_config(message: types.Message, **kwargs):
    await message.delete()
    await start_get_config(message)

@dp.message_handler(lambda message: message.text == "üåê –ü—Ä–∞–≤–∏–ª–∞")
@subscription_required
async def handle_server_info(message: types.Message, **kwargs):
    await message.delete()
    await show_server_info(message)

@dp.message_handler(lambda message: message.text == "üéÅ –ü–†–û–ë–ù–´–ô –ü–ï–†–ò–û–î ‚Ä¢ 3 –î–ù–Ø")
@subscription_required
async def start_trial_period_button_handler(message: types.Message, **kwargs):
    await message.delete()
    await start_trial_period(message, dp.current_state(chat=message.from_user.id, user=message.from_user.id))

async def show_tariffs_and_purchase(message: types.Message):
    prices_text = (
        "‚ïî‚ïê‚ïê‚ïê üíé VPN –¢–ê–†–ò–§–´ üíé ‚ïê‚ïê‚ïê‚ïó\n\n"
        "üí∞ <b>–°–¢–û–ò–ú–û–°–¢–¨ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø:</b>\n"
        f"‚îú‚îÄ üî∏ 1 –º–µ—Å—è—Ü: <b>{os.getenv('PRICE_2592000000')}‚ÇΩ</b>\n"
        f"‚îú‚îÄ üî∏ 2 –º–µ—Å—è—Ü–∞: <b>{os.getenv('PRICE_5184000000')}‚ÇΩ</b>\n"
        f"‚îú‚îÄ üî∏ 6 –º–µ—Å—è—Ü–µ–≤: <b>{os.getenv('PRICE_15552000000')}‚ÇΩ</b>\n"
        f"‚îî‚îÄ üî∏ 1 –≥–æ–¥: <b>{os.getenv('PRICE_31104000000')}‚ÇΩ</b>\n\n"
        "üåü <b>–ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –°–ï–†–í–ò–°–ê:</b>\n"
        "‚îú‚îÄ ‚ö°Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å\n"
        "‚îú‚îÄ üìä –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫\n"
        "‚îú‚îÄ üåç –û–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫\n"
        "‚îú‚îÄ üîí –ù–∞–¥–µ–∂–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ\n"
        "‚îî‚îÄ üì± –í—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n\n"
        "‚ú® <b>–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û:</b>\n"
        "‚îú‚îÄ üîÑ –ì–∞—Ä–∞–Ω—Ç–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ 30 –¥–Ω–µ–π\n"
        "‚îú‚îÄ üéÅ –ë–æ–Ω—É—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n"
        f"‚îî‚îÄ üë®‚Äçüíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7: {NIK}\n\n"
        "üõ°Ô∏è <i>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –≤ –æ–¥–Ω–æ–º –ø–∞–∫–µ—Ç–µ!</i>"
    )
    
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å VPN üõí", callback_data="buy_vpn"))
    
    await message.answer(prices_text, parse_mode=ParseMode.HTML, reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == 'buy_vpn')
async def process_buy_vpn(callback_query: types.CallbackQuery):
    if await check_subscription(callback_query.from_user.id):
        await bot.answer_callback_query(callback_query.id)
        await start_add_client(callback_query.message)
    else:
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            types.InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK),
            types.InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")
        )

        await bot.answer_callback_query(
            callback_query.id,
            f"‚ö†Ô∏è –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª {CHANNEL_ID}",
            show_alert=True
        )

        await bot.send_message(
            callback_query.from_user.id,
            (
                "‚ïî‚ïê‚ïê‚ïê üîí –î–û–°–¢–£–ü –û–ì–†–ê–ù–ò–ß–ï–ù üîí ‚ïê‚ïê‚ïê‚ïó\n\n"
                "üì± <b>–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ VPN –±–æ—Ç—É</b>\n"
                f"‚îî‚îÄ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_ID}\n\n"
                "üåü <b>–ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –ü–û–î–ü–ò–°–ö–ò:</b>\n"
                "‚îú‚îÄ üì¢ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
                "‚îú‚îÄ üíé –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n"
                "‚îú‚îÄ üõ°Ô∏è –°–æ–≤–µ—Ç—ã –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
                "‚îú‚îÄ üéÅ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫—Ü–∏–∏\n"
                "‚îî‚îÄ ‚ö°Ô∏è –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º\n\n"
                "‚ïî‚ïê‚ïê‚ïê ‚ö†Ô∏è –í–ê–ñ–ù–û ‚ö†Ô∏è ‚ïê‚ïê‚ïê‚ïó\n"
                "‚îú‚îÄ –ü–æ–¥–ø–∏—Å–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞\n"
                "‚îî‚îÄ –≠—Ç–æ –∑–∞–π–º–µ—Ç 5 —Å–µ–∫—É–Ω–¥\n\n"
                "üëá <b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:</b>"
            ),
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )

async def show_instructions(message: types.Message):
    instruction_menu_keyboard = types.InlineKeyboardMarkup(row_width=2)

    instructions = [
        ("üì± iOS", "https://telegra.ph/Instrukciya-dlya-iOS-01-11"),
        ("ü§ñ Android", "https://telegra.ph/Instrukciya-dlya-Android-01-11"),
        ("üçé macOS", "https://telegra.ph/Instrukciya-dlya-MacOS-01-11"),
        ("üñ•Ô∏è Windows", "https://telegra.ph/Instrukciya-dlya-Windows-01-11"),
        ("üêß Linux", "https://telegra.ph/Instrukciya-dlya-Linux-Ubuntu-AppImage-01-11"),
    ]

    for name, url in instructions:
        instruction_menu_keyboard.insert(types.InlineKeyboardButton(text=name, url=url))

    instruction_menu_keyboard.add(
        types.InlineKeyboardButton(text="‚ùì FAQ", callback_data="faq")
    )

    await message.answer(
        "üìö <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n\n"
        "‚Ä¢ iOS - –¥–ª—è iPhone –∏ iPad\n"
        "‚Ä¢ Android - –¥–ª—è —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤ –∏ –ø–ª–∞–Ω—à–µ—Ç–æ–≤\n"
        "‚Ä¢ macOS - –¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤ Apple\n"
        "‚Ä¢ Windows - –¥–ª—è –ü–ö\n"
        "‚Ä¢ Linux - –¥–ª—è Ubuntu/Debian\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ—Å–ª–µ –ø—Ä–æ—á—Ç–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, "
        "–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ä–∞–∑–¥–µ–ª–æ–º FAQ (—á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã).",
        reply_markup=instruction_menu_keyboard,
        parse_mode=ParseMode.HTML
    )

@dp.callback_query_handler(lambda c: c.data == 'faq')
async def process_faq(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    faq_text = (
        "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê ‚ùì FAQ ‚ùì ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n\n"
        "üîß <b>–ù–ê–°–¢–†–û–ô–ö–ê VPN:</b>\n"
        "‚îú‚îÄ –í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n"
        "‚îú‚îÄ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n"
        "‚îî‚îÄ –ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!\n\n"
        "‚ö°Ô∏è <b>–†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú:</b>\n"
        "‚îú‚îÄ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ\n"
        "‚îú‚îÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
        "‚îî‚îÄ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç\n\n"
        "üõ°Ô∏è <b>–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:</b>\n"
        "‚îú‚îÄ –ë–µ–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è\n"
        "‚îú‚îÄ –ó–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö\n"
        "‚îî‚îÄ –û–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫\n\n"
        "üë®‚Äçüíª <b>–ü–û–î–î–ï–†–ñ–ö–ê 24/7:</b>\n"
        f"‚îî‚îÄ {NIK}\n\n"
        "üí´ <i>–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –ú—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!</i>"
    )
    await bot.send_message(callback_query.from_user.id, faq_text, parse_mode=ParseMode.HTML)

async def show_server_info(message: types.Message):
    server_info_text = (
        "‚ïî‚ïê‚ïê‚ïê‚ïê üåü YUKI VPN üåü ‚ïê‚ïê‚ïê‚ïê‚ïó\n\n"
        "üõ°Ô∏è <b>–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:</b>\n"
        "‚îú‚îÄ üîí –ó–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö\n"
        "‚îú‚îÄ üïµÔ∏è‚Äç‚ôÇÔ∏è –ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å\n"
        "‚îî‚îÄ üîê –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ\n\n"
        "‚ö°Ô∏è <b>–ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:</b>\n"
        "‚îú‚îÄ üöÄ –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å\n"
        "‚îú‚îÄ ‚ôæÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫\n"
        "‚îî‚îÄ üåç –°–µ—Ä–≤–µ—Ä—ã –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É\n\n"
        "üìã <b>–ü–†–ê–í–ò–õ–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:</b>\n"
        "‚îú‚îÄ ‚öñÔ∏è –°–æ–±–ª—é–¥–µ–Ω–∏–µ –∑–∞–∫–æ–Ω–æ–≤\n"
        "‚îú‚îÄ ü§ù –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ\n"
        "‚îî‚îÄ üîë –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø\n\n"
        "üë®‚Äçüíª <b>–ü–û–î–î–ï–†–ñ–ö–ê 24/7:</b>\n"
        f"‚îî‚îÄ {NIK}\n\n"
        "‚ú® <i>–í–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞!</i>"
    )
    await message.answer(server_info_text, parse_mode=ParseMode.HTML)

async def start_trial_period(message: types.Message, state: FSMContext):
    session_id = await login()
    if session_id:
        telegram_id = message.from_user.id
        user = await execute_db_query(USERSDATABASE, "SELECT * FROM users WHERE telegram_id=?", (telegram_id,))

        if user and user[0][1]:
            await message.answer(
                "üîí <b>–î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–±–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</b>\n\n"
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –Ω–∞—à–∏ –∑–∞–ø–∏—Å–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç, —á—Ç–æ –≤—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥. üïµÔ∏è‚Äç‚ôÇÔ∏è\n\n"
                "üåü <b>–ü–æ—á–µ–º—É –±—ã –Ω–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à–∏ —Ç–∞—Ä–∏—Ñ—ã?</b>\n"
                "‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–Ω—ã\n"
                "‚Ä¢ –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å\n"
                "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫\n\n",
                parse_mode=ParseMode.HTML
            )
            bot_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
        else:
            num1 = random.randint(1, 20)
            num2 = random.randint(1, 20)
            correct_answer = num1 + num2
            await message.answer(
                "‚ïî‚ïê‚ïê‚ïê üéÅ –ü–†–û–ë–ù–´–ô –ü–ï–†–ò–û–î üéÅ ‚ïê‚ïê‚ïê‚ïó\n\n"
                "üéØ <b>–ü–û–õ–£–ß–ò–¢–ï 3 –î–ù–Ø –ë–ï–°–ü–õ–ê–¢–ù–û!</b>\n\n"
                "üìù <b>–í–∞—à–∞ –∑–∞–¥–∞—á–∞:</b>\n"
                f"‚îú‚îÄ üßÆ <code>{num1} + {num2} = ?</code>\n"
                "‚îî‚îÄ ‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç —Ü–∏—Ñ—Ä–∞–º–∏\n\n"
                "üí´ <i>–†–µ—à–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ VPN –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</i>"
            , parse_mode=ParseMode.HTML)
            await TrialPeriodState.waiting_for_answer.set()
            await state.update_data(correct_answer=correct_answer, num_attempts=0)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.")
        bot_logger.error("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.")
        await state.finish()

@dp.message_handler(state=TrialPeriodState.waiting_for_answer)
async def process_user_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    num_attempts = data.get('num_attempts', 0)

    if not message.text.isdigit():
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main"))
        
        await message.answer(
            "‚ïî‚ïê‚ïê‚ïê ‚ö†Ô∏è –û–®–ò–ë–ö–ê –í–í–û–î–ê ‚ö†Ô∏è ‚ïê‚ïê‚ïê‚ïó\n\n"
            "‚ùå –í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n\n"
            "üìù <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>\n"
            "‚îî‚îÄ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã\n\n",
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
        return

    user_answer = int(message.text)
    correct_answer = data.get('correct_answer')

    if user_answer == correct_answer:
        id_vless = ID_1
        email = ''.join(random.choices(string.ascii_lowercase + string.digits, k=12))
        expiry_time = -259200000
        telegram_id = message.from_user.id
        
        user = await execute_db_query(USERSDATABASE, "SELECT * FROM users WHERE telegram_id=?", (telegram_id,))
        
        if user:
            if user[0][1]:
                await message.answer("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
                await state.finish()
                return
            await execute_db_query(USERSDATABASE, "UPDATE users SET email=? WHERE telegram_id=?", (email, telegram_id))
        else:
            await execute_db_query(USERSDATABASE, "INSERT INTO users (telegram_id, email) VALUES (?, ?)", (telegram_id, email))
        
        await message.answer(f"‚úÖ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! \n–í–∞—à –ª–æ–≥–∏–Ω: {email}")
        await add_client(message, email, expiry_time, id_vless, telegram_id)
        bot_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–∞—á–∞–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        keyboard = await get_main_keyboard(telegram_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é
        await message.answer(
            "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üåü YUKI VPN üåü ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n\n"
            "‚ú® <b>–î–û–°–¢–£–ü–ù–´–ï –§–£–ù–ö–¶–ò–ò:</b>\n\n"
            "‚îú‚îÄ üíé –ü—Ä–µ–º–∏—É–º VPN-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
            "‚îú‚îÄ üöÄ –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–∞\n"
            "‚îú‚îÄ üîí –ù–∞–¥—ë–∂–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ\n"
            "‚îî‚îÄ üí´ –ë–æ–Ω—É—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n\n"
            "üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –º–µ–Ω—é:</b>",
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ —É–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        notification = await message.answer(
            "‚ïî‚ïê‚ïê üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï ‚ïê‚ïê‚ïó\n"
            "  –ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n",
            parse_mode=ParseMode.HTML
        )
        await asyncio.sleep(3)
        await notification.delete()

        await state.finish()
    else:
        num_attempts += 1
        await state.update_data(num_attempts=num_attempts)

        if num_attempts >= 3:
            await message.answer("‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Ç—Ä–∏ —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.finish()
        else:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def start_add_client(message: types.Message):
    await message.answer(
        "üöÄ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ VPN</b>\n\n"
        "üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∞ –ª—é–±–æ–π —Å—Ä–æ–∫\n\n"
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:",
        parse_mode=ParseMode.HTML,
        reply_markup=get_expiry_time_keyboard()  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    )
    await AddClient.WaitingForExpiryTime.set()

@dp.callback_query_handler(lambda c: c.data == 'back_to_main', state='*')
async def process_back_to_main(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await main_menu(callback_query.message)
    await callback_query.message.delete()

@dp.callback_query_handler(lambda c: c.data == "back_to_tariffs", state=AddClient.WaitingForExpiryTime)
async def back_to_tariffs(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await show_tariffs_and_purchase(callback_query.message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Ç–∞—Ä–∏—Ñ–∞–º –∏ –ø–æ–∫—É–ø–∫–µ

@dp.callback_query_handler(expiry_cb.filter(), state=AddClient.WaitingForExpiryTime)
async def process_expiry_time(callback_query: types.CallbackQuery, callback_data: dict, state: FSMContext):
    expiry_time = int(callback_data['time'])
    await state.update_data(expiry_time=expiry_time)
    
    expiry_time_description = get_expiry_time_description(expiry_time)
    price = get_price(expiry_time)

    original_price = int(price.replace(" ‚ÇΩ", ""))
    discounted_price = await apply_referral_discount(callback_query.from_user.id, original_price)
    
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        f"‚úÖ <b>–¢–∞—Ä–∏—Ñ –≤—ã–±—Ä–∞–Ω</b>\n\n"
        f"üìÖ {expiry_time_description}\n"
        f"üí∞ {discounted_price} ‚ÇΩ\n"
        f"üéÅ –°–∫–∏–¥–∫–∞: {int(100 - (discounted_price / original_price * 100))}%\n\n"
        f"üë§ <b>–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ª–æ–≥–∏–Ω</b>\n"
        f"‚Ä¢ –õ–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã\n"
        f"‚Ä¢ –ë–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤\n\n"
        f"<i>–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:</i>",
        parse_mode=ParseMode.HTML,
        reply_markup=get_back_keyboard()  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    )
    
    await AddClient.WaitingForName.set()

def get_back_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_expiry"))
    return keyboard

class AddClient(StatesGroup):
    WaitingForExpiryTime = State()
    WaitingForName = State()
    WaitingForConfirmation = State() 

@dp.callback_query_handler(lambda c: c.data == "back_to_expiry", state=AddClient.WaitingForName)
async def back_to_expiry(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await start_add_client(callback_query.message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É —Ç–∞—Ä–∏—Ñ–∞

@dp.message_handler(state=AddClient.WaitingForName)
async def process_name(message: types.Message, state: FSMContext):
    name = message.text.strip().lower()

    if not re.match('^[a-z0-9]+$', name):
        await message.answer(
            "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n"
            "–í–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã.\n"
            "‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –∏ —Ü–∏—Ñ—Ä—ã.\n"
            "‚ùå –ö–∏—Ä–∏–ª–ª–∏—Ü–∞, –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã.\n\n"
            "üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –µ—â–µ —Ä–∞–∑:",
            parse_mode=ParseMode.HTML
        )
        return

    user_exists = await execute_db_query(DATABASE, "SELECT * FROM client_traffics WHERE email=?", (name,))
    if user_exists:
        await message.answer(
            "‚ö†Ô∏è <b>–ò–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ</b>\n\n"
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–º—è <code>{name}</code> —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.\n"
            "üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ:",
            parse_mode=ParseMode.HTML
        )
        return

    async with state.proxy() as data:
        expiry_time = data['expiry_time']
        data['name'] = name

    expiry_time_description = get_expiry_time_description(expiry_time)
    price = get_price(expiry_time)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É
    original_price = int(price.replace(" ‚ÇΩ", ""))
    discounted_price = await apply_referral_discount(message.from_user.id, original_price)
    
    text = (
        f"üéâ <b>–û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ—á—Ç–∏ —É —Ü–µ–ª–∏!</b>\n\n"
        f"üìÖ <b>–°—Ä–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b> {expiry_time_description}\n"
        f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {discounted_price} ‚ÇΩ\n"
        f"üîë <b>–í–∞—à –ª–æ–≥–∏–Ω:</b> <code>{name}</code>\n\n"
        f"üõí –ì–æ—Ç–æ–≤—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ?\n\n"
    )

    await message.answer(
        text,
        reply_markup=get_purchase_keyboard_with_cancel(),
        parse_mode=ParseMode.HTML
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
    await AddClient.WaitingForConfirmation.set()

@dp.callback_query_handler(purchase_cb.filter(action="purchase"), state=AddClient.WaitingForConfirmation)
async def confirm_purchase(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        name = data['name']
        expiry_time = data['expiry_time']

    expiry_time_text = get_expiry_time_description(expiry_time)
    price_index = {"-2592000000": 0, "-5184000000": 1, "-15552000000": 2, "-31104000000": 3}[str(expiry_time)]
    original_price = PRICES[price_index].amount
    discounted_price = await apply_referral_discount(callback_query.from_user.id, original_price)
    
    invoice_payload = json.dumps({"name": name, "expiry_time": expiry_time})
    
    await bot.send_invoice(
        callback_query.from_user.id,
        title=f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è {name} –Ω–∞ {expiry_time_text}",
        description=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {expiry_time_text}",
        provider_token=PAYMENTS_TOKEN,
        currency="rub",
        prices=[types.LabeledPrice(label=f"–ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π", amount=discounted_price)],
        start_parameter=f"vpn_subscription_{callback_query.from_user.id}_{expiry_time}",
        payload=invoice_payload
    )
    await callback_query.answer()
    await bot.send_message(callback_query.from_user.id, "‚ö†Ô∏è –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –∏–ª–∏ –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ, –Ω–µ –æ–ø–ª–∞—á–∏–≤–∞–π—Ç–µ, –∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
    await state.finish()

@dp.callback_query_handler(purchase_cb.filter(action="cancel"), state=AddClient.WaitingForConfirmation)
async def cancel_purchase(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
    await bot.send_message(callback_query.message.chat.id, "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
    await state.finish()

@dp.callback_query_handler(purchase_cb.filter(action="purchase"), state=AddClient.WaitingForExpiryTime)
async def purchase_subscription(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        name = data['name']
        expiry_time = data['expiry_time']

    expiry_time_text = get_expiry_time_description(expiry_time)
    price_index = {"-2592000000": 0, "-5184000000": 1, "-15552000000": 2, "-31104000000": 3}[str(expiry_time)]
    original_price = PRICES[price_index].amount
    discounted_price = await apply_referral_discount(callback_query.from_user.id, original_price)
    
    invoice_payload = json.dumps({"name": name, "expiry_time": expiry_time})
    
    await bot.send_invoice(
        callback_query.from_user.id,
        title=f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è {name} –Ω–∞ {expiry_time_text}",
        description=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {expiry_time_text}",
        provider_token=PAYMENTS_TOKEN,
        currency="rub",
        prices=[types.LabeledPrice(label=f"–ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π", amount=discounted_price)],
        start_parameter=f"vpn_subscription_{callback_query.from_user.id}_{expiry_time}",
        payload=invoice_payload
    )
    await callback_query.answer()
    await bot.send_message(callback_query.from_user.id, "‚ö†Ô∏è –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –∏–ª–∏ –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ, –Ω–µ –æ–ø–ª–∞—á–∏–≤–∞–π—Ç–µ, –∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
    await state.finish()

@dp.pre_checkout_query_handler(lambda query: True)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    try:
        await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)
        bot_logger.info(f"Pre-checkout query answered successfully for user {pre_checkout_q.from_user.id}")
    except Exception as e:
        bot_logger.error(f"Error in pre_checkout_query: {e}")
        await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=False, error_message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    try:
        bot_logger.info(f"Received successful payment from user {message.from_user.id}")
        payload = message.successful_payment.invoice_payload
        payload_data = json.loads(payload)
        
        name = payload_data.get("name")
        expiry_time = payload_data.get("expiry_time")
        if name is None or expiry_time is None:
            await bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –∏–º—è –∏–ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã.")
            bot_logger.error(f"Error: name or expiry_time is None for user {message.from_user.id}")
            return

        telegram_id = message.from_user.id
        id_vless = ID_2
        await add_client(message, name, expiry_time, id_vless, telegram_id)
        bot_logger.info(f"Successfully added client for user {telegram_id}")
    except Exception as e:
        bot_logger.error(f"Error in successful_payment: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

async def add_client(message, name, expiry_time, id_vless, telegram_id):
    try:
        session_id = await login()
        if session_id:
            if name is not None and expiry_time is not None:
                client_id = ''.join(random.choices(string.ascii_letters + string.digits, k=20))
                success = await add_client_request(message, session_id, name, expiry_time, client_id, id_vless)
                if success:
                    try:
                        existing_user = await execute_db_query(USERSDATABASE, "SELECT * FROM users WHERE telegram_id = ?", (telegram_id,))
                        if existing_user:
                            current_email = existing_user[0][1]
                            new_email = f"{current_email},{name}" if current_email else name
                            await execute_db_query(USERSDATABASE, "UPDATE users SET email = ? WHERE telegram_id = ?", (new_email, telegram_id))
                        else:
                            await execute_db_query(USERSDATABASE, "INSERT INTO users (telegram_id, email) VALUES (?, ?)", (telegram_id, name))
                        await send_config(message, name)
                    except Exception as e:
                        bot_logger.error(f"Error updating/inserting user data: {e}")
                        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                else:
                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞.")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –∏–º—è –∏–ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã.")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.")
    except Exception as e:
        bot_logger.error(f"Error in add_client: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

async def login():
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(LOGIN_URL, data=LOGIN_DATA, ssl=False) as response:
                if response.status == 200:
                    cookies = response.cookies
                    session_id = cookies.get("3x-ui").value if "3x-ui" in cookies else None
                    if session_id:
                        bot_logger.info(f"Session ID: {session_id}")
                        return session_id
                    else:
                        bot_logger.error("Session ID not found in cookies")
                        return None
                else:
                    bot_logger.error(f"Failed to log in, status code: {response.status}")
                    return None
    except Exception as e:
        bot_logger.error(f"Exception during login: {e}")
        return None

async def add_client_request(message, session_id, name, expiry_time, client_id, id_vless):
    total_gb = total_gb_values.get(expiry_time, UNLIMITED_TRAFFIC)
    
    settings = {
        "clients": [{
            "id": str(client_id),
            "flow": "xtis-rprx-vision",
            "alterId": 0,
            "email": str(name),
            "limitIp": 3,
            "totalGB": total_gb if total_gb != UNLIMITED_TRAFFIC else 0,
            "expiryTime": int(expiry_time),
            "enable": True,
            "tgId": "",
            "subId": ""
        }]
    }
    
    client_data = {
        "id": int(id_vless),
        "settings": json.dumps(settings)
    }

    headers = {
        "Accept": "application/json",
        "Content-Type": "application/json",
        "Cookie": f"3x-ui={session_id}"
    }

    bot_logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞: {json.dumps(client_data, ensure_ascii=False, indent=2)}")

    async with aiohttp.ClientSession() as session:
        async with session.post(ADD_CLIENT_URL, headers=headers, json=client_data, ssl=False) as response:
            bot_logger.info(f"Add client response status: {response.status}")
            response_text = await response.text()
            bot_logger.info(f"Add client response body: {response_text}")

            if response.status == 200:
                response_json = json.loads(response_text)
                if response_json.get("success"):
                    if message:
                        await message.answer(
                            "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
                            "üîì –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞\n\n"
                            "üöÄ –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–∏–º VPN-—Å–µ—Ä–≤–∏—Å–æ–º!\n"
                            "üìû –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                            parse_mode=ParseMode.HTML
                        )
                    return True
                else:
                    error_msg = response_json.get('msg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                    if message:
                        await message.answer(
                            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞</b>\n\n"
                            f"üîç –î–µ—Ç–∞–ª–∏: {error_msg}\n\n"
                            "üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                            parse_mode=ParseMode.HTML
                        )
                    bot_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {error_msg}")
                    return False
            else:
                if message:
                    await message.answer(
                        "üö´ <b>–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞</b>\n\n"
                        f"üìä –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status}\n"
                        f"üìù –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response_text}\n\n"
                        "üë®‚Äçüíª –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã.\n"
                        "üïí –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        parse_mode=ParseMode.HTML
                    )
                bot_logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞. –°—Ç–∞—Ç—É—Å: {response.status}, –û—Ç–≤–µ—Ç: {response_text}")
                return False

async def send_config(message, email):
    db = Database(DATABASE)
    client_ids = await db.get_ids_by_email(email)
    
    if not client_ids:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</b>\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º—ã.",
            parse_mode=ParseMode.HTML
        )
        return

    await message.answer(
        "üîê <b>–í–∞—à–∏ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤—ã!</b>\n\n"
        "–ù–∏–∂–µ –≤—ã –Ω–∞–π–¥–µ—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ QR-–∫–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ, —á—Ç–æ –≤–∞–º —É–¥–æ–±–Ω–µ–µ.\n\n"
        "<i>–°–æ–≤–µ—Ç: –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –Ω–∞–¥–µ–∂–Ω–æ–º –º–µ—Å—Ç–µ.</i>",
        parse_mode=ParseMode.HTML
    )

    for client_id in client_ids:
        config_str, _ = await generate_config(client_id, email)
        
        await message.answer(
            f"üìã <b>–¢–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b>\n\n<pre>{config_str}</pre>",
            parse_mode=ParseMode.HTML
        )
        
        qr = qrcode.QRCode(version=1, error_correction=qrcode.constants.ERROR_CORRECT_L, box_size=4, border=4)
        qr.add_data(config_str)  # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        qr.make(fit=True)
        qr_image = qr.make_image(fill_color="black", back_color="white")
        
        with BytesIO() as qr_bytes:
            qr_image.save(qr_bytes)
            qr_bytes.seek(0)
            await message.answer_photo(
                qr_bytes,
                caption="üì≤ <b>QR-–∫–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n"
                        "–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –≤–∞—à–µ–º VPN-–∫–ª–∏–µ–Ω—Ç–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
                parse_mode=ParseMode.HTML
            )

    instruction_keyboard = types.InlineKeyboardMarkup(row_width=2)
    instructions = [
        ("üì± iOS", "ios_instruction"),
        ("ü§ñ Android", "android_instruction"),
        ("üçé macOS", "macos_instruction"),
        ("üñ•Ô∏è Windows", "windows_instruction")
    ]

    for name, callback in instructions:
        instruction_keyboard.insert(types.InlineKeyboardButton(text=name, callback_data=callback))

    await message.answer(
        "üìö <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>",
        reply_markup=instruction_keyboard,
        parse_mode=ParseMode.HTML
    )

async def generate_config(client_id, email, prt=None, pot=None, pbk=None, fp=None, sni=None, sid=None, net=None, secur=None):
    if prt is None or pot is None or pbk is None or fp is None or sni is None or sid is None:
        db = Database(DATABASE)
        stream_settings = await db.get_stream_settings(email)
        if stream_settings:
            prt, pot, net, secur, pbk, fp, sni, sid = stream_settings[0]
        else:
            return "", None
    
    config_str = f"{prt}://{client_id}@{SERVER_IP}:{pot}?type={net}&security={secur}&pbk={pbk}&fp={fp}&sni={sni}&sid={sid}&spx=%2F#{email}"
    
    config_dict = {
        "username": client_id,
        "server_address": SERVER_IP,
        "port": pot,
        "protocol_type": net,
        "security_type": secur,
        "public_key": pbk,
        "fingerprint": fp,
        "server_name": sni,
        "session_id": sid,
        "routing_params": "/",
        "name": email
    }
    
    return config_str, config_dict

def get_price(expiry_time_ms):
    prices = {
        -2592000000: int(os.getenv('PRICE_2592000000')),
        -5184000000: int(os.getenv('PRICE_5184000000')),
        -15552000000: int(os.getenv('PRICE_15552000000')),
        -31104000000: int(os.getenv('PRICE_31104000000'))
    }
    return f"{prices.get(expiry_time_ms, '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} ‚ÇΩ"

def get_expiry_time_description(expiry_time_ms):
    descriptions = {
        -2592000000: "–º–µ—Å—è—Ü",
        -5184000000: "–¥–≤–∞ –º–µ—Å—è—Ü–∞",
        -15552000000: "–ø–æ–ª –≥–æ–¥–∞",
        -31104000000: "–≥–æ–¥"
    }
    return descriptions.get(expiry_time_ms, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

UNLIMITED_TRAFFIC = float('inf')

def get_total_gb(value):
    gb_value = os.getenv(f'TOTAL_GB_{abs(value)}')
    if gb_value == 'unlimited':
        return UNLIMITED_TRAFFIC
    return int(gb_value)

total_gb_values = {
    -259200000: get_total_gb(259200000),
    -2592000000: get_total_gb(2592000000),
    -5184000000: get_total_gb(5184000000),
    -15552000000: get_total_gb(15552000000),
    -31104000000: get_total_gb(31104000000),
}

async def start_get_config(message):
    telegram_id = message.from_user.id
    emails = await get_emails_from_database(telegram_id)

    if emails:
        if len(emails) == 1:
            await process_email_for_config(message, emails[0])
        else:
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            for email in emails:
                keyboard.add(types.InlineKeyboardButton(text=f"üîë {email}", callback_data=f"show_config:{email}"))
            
            await message.answer(
                "üì¶ <b>–í–∞—à–∏ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</b>\n\n"
                "–£ –≤–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π. "
                "–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–≥–∏–Ω, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏:\n\n"
                "<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω—É–∂–Ω—ã–º –ª–æ–≥–∏–Ω–æ–º –Ω–∏–∂–µ:</i>",
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
            )
    else:
        await message.answer(
            "‚ùå <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫\n"
            "‚Ä¢ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ\n\n"
            "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –Ω–∞—à—É —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –ø–æ–º–æ—â–∏.",
            parse_mode=ParseMode.HTML
        )

@dp.callback_query_handler(lambda c: c.data.startswith('show_config:'))
async def process_config_selection(callback_query: types.CallbackQuery):
    email = callback_query.data.split(':')[1]
    await process_email_for_config(callback_query.message, email)
    await callback_query.answer()

async def get_emails_from_database(telegram_id):
    user_data = await execute_db_query(USERSDATABASE, "SELECT email FROM users WHERE telegram_id=?", (telegram_id,))
    if user_data and user_data[0][0]:
        return list(set(user_data[0][0].split(',')))
    return []

class ConfigStates(StatesGroup):
    last_config = State()

async def process_email_for_config(message, email):
    db = Database(DATABASE)
    client_ids = await db.get_ids_by_email(email)
    if client_ids:
        configs_sent = set()
        for client_id in client_ids:
            config_str, config_dict = await generate_config(client_id, email)
            if config_str not in configs_sent:
                configs_sent.add(config_str)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                state = dp.current_state(user=message.chat.id)
                await state.update_data(last_config_str=config_str, last_config_dict=config_dict)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–∞–∫ –æ–±—ã—á–Ω–æ
                await message.answer(
                    f"üîê <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è VPN –¥–ª—è {email}:</b>\n\n<pre>{config_str}</pre>",
                    parse_mode=ParseMode.HTML
                )
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥
                qr = qrcode.QRCode(version=1, error_correction=qrcode.constants.ERROR_CORRECT_L, box_size=4, border=4)
                qr.add_data(config_str)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                qr.make(fit=True)
                qr_image = qr.make_image(fill_color="black", back_color="white")
                with BytesIO() as qr_bytes:
                    qr_image.save(qr_bytes)
                    qr_bytes.seek(0)
                    await message.answer_photo(
                        qr_bytes,
                        caption=f"üì≤ QR-–∫–æ–¥ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {email}"
                    )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
        instruction_keyboard = types.InlineKeyboardMarkup(row_width=2)
        instructions = [
            ("üì± iOS", "ios_instruction"),
            ("ü§ñ Android", "android_instruction"),
            ("üçé macOS", "macos_instruction"),
            ("üñ•Ô∏è Windows", "windows_instruction")
        ]

        for name, callback in instructions:
            instruction_keyboard.insert(types.InlineKeyboardButton(text=name, callback_data=callback))

        await message.answer(
            "üìö <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>",
            reply_markup=instruction_keyboard,
            parse_mode=ParseMode.HTML
        )

        client_traffics = await db.get_client_traffics_by_email(email)
        if client_traffics:
            traffic_response = "\nüìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ:</b>\n\n"
            for result in client_traffics:
                email, up, down, expiry_time, total = result

                formatted_expiry_time = dt.fromtimestamp(abs(expiry_time) / 1000).strftime('%d.%m.%Y %H:%M')
                up_gb = up / (1024 ** 3)
                down_gb = down / (1024 ** 3)
                total_gb = total / (1024 ** 3)

                remaining_gb = max(0, total_gb - (up_gb + down_gb))
                
                traffic_response += (
                    f"‚ïî‚ïê üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> ‚ïê‚ïó\n\n"
                    f"üë§ <b>–õ–æ–≥–∏–Ω:</b> <code>{email}</code>\n\n"
                    f"üìà <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞:</b>\n"
                    f"‚îú‚îÄ ‚Üë –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {up_gb:.2f} –ì–ë\n"
                    f"‚îú‚îÄ ‚Üì –ü–æ–ª—É—á–µ–Ω–æ: {down_gb:.2f} –ì–ë\n"
                    f"‚îî‚îÄ üìä –í—Å–µ–≥–æ: {up_gb + down_gb:.2f} –ì–ë\n\n"
                    f"‚è≥ <b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ:</b>\n"
                    f"‚îî‚îÄ üìÖ {formatted_expiry_time}\n\n"
                    f"üíæ <b>–õ–∏–º–∏—Ç—ã —Ç—Ä–∞—Ñ–∏–∫–∞:</b>\n"
                    f"‚îú‚îÄ üì¶ –û–±—â–∏–π –æ–±—ä–µ–º: {format_traffic(total)}\n"
                    f"‚îî‚îÄ ‚ú® –û—Å—Ç–∞–ª–æ—Å—å: {format_traffic(remaining_gb * 1024 ** 3)}\n\n"
                )
            
            await message.answer(traffic_response, parse_mode=ParseMode.HTML)
        else:
            await message.answer("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞—Ñ–∏–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    else:
        await message.answer("‚ùå –ü–µ—Ä–∏–æ–¥ –ø—Ä–æ—à–ª–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –æ–∫–æ–Ω—á–µ–Ω!")

def format_traffic(traffic):
    if traffic == UNLIMITED_TRAFFIC:
        return "–ë–µ–∑–ª–∏–º–∏—Ç"
    else:
        return f"{traffic / (1024**3):.2f} –ì–ë"

async def check_subscription_expiry():
    current_date = datetime.datetime.today().date()
    bot_logger.info(f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date}")

    clients = await execute_db_query(USERSDATABASE, "SELECT telegram_id, email FROM users")

    for client in clients:
        telegram_id, email = client
        subscription_expiry_time = await execute_db_query(DATABASE, "SELECT expiry_time FROM client_traffics WHERE email=?", (email,))

        if subscription_expiry_time:
            expiry_time = subscription_expiry_time[0][0]
            formatted_expiry_time = dt.fromtimestamp(abs(expiry_time) / 1000).strftime('%Y-%m-%d %H:%M:%S')
            expiry_date = datetime.datetime.strptime(formatted_expiry_time, "%Y-%m-%d %H:%M:%S").date()
            bot_logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}, –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {expiry_date}")
            
            for i in range(7, 0, -1):
                notification_date = current_date + datetime.timedelta(days=i)
                if expiry_date == notification_date:
                    await send_expiry_notification(telegram_id, i)

async def send_expiry_notification(telegram_id, days_left):
    if days_left == 1:
        notification_text = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é ‚ùóÔ∏è\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë –≤–æ–≤—Ä–µ–º—è. ‚è∞"
    elif days_left == 0:
        notification_text = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é ‚ùóÔ∏è\n–°–µ–≥–æ–¥–Ω—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë —Å—Ä–æ–∫. ‚è≥"
    else:
        days_word = '–¥–Ω–µ–π' if 5 <= days_left <= 20 else '–¥–µ–Ω—å' if days_left % 10 == 1 else '–¥–Ω—è' if 2 <= days_left % 10 <= 4 else '–¥–Ω–µ–π'
        notification_text = f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é ‚ùóÔ∏è\n–û—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ {days_left} {days_word} –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë –≤–æ–≤—Ä–µ–º—è. ‚è≥"

    try:
        await bot.send_message(telegram_id, notification_text)
        bot_logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {telegram_id}")
    except Exception as e:
        bot_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {telegram_id}: {e}")

@dp.message_handler(commands=['check_subscription'])
async def check_subscription_command(message: types.Message):
    await check_subscription_expiry()
    await message.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

async def check_referral_integrity():
    async with aiosqlite.connect(USERSDATABASE) as db:
        cursor = await db.execute('SELECT telegram_id, referral_count, total_referrals FROM users')
        users = await cursor.fetchall()
        for user in users:
            telegram_id, referral_count, total_referrals = user
            cursor = await db.execute('SELECT COUNT(*) FROM users WHERE referrer_id = ?', (telegram_id,))
            actual_count = (await cursor.fetchone())[0]
            if actual_count != referral_count or actual_count != total_referrals:
                bot_logger.warning(f"Referral count mismatch for user {telegram_id}. DB: {referral_count}/{total_referrals}, Actual: {actual_count}")
                await db.execute('UPDATE users SET referral_count = ?, total_referrals = ? WHERE telegram_id = ?', (actual_count, actual_count, telegram_id))
        await db.commit()

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ scheduled()
async def scheduled():
    while True:
        await check_subscription_expiry()
        await check_referral_integrity()
        bot_logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        await asyncio.sleep(86400)

async def on_startup(dp):
    bot_logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await initialize_database()
    asyncio.create_task(scheduled())

async def on_shutdown(dp):
    bot_logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

@dp.callback_query_handler(lambda c: c.data in ['ios_instruction', 'android_instruction', 'macos_instruction', 'windows_instruction'])
async def process_instruction(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    config_str = state_data.get('last_config_str')
    config_dict = state_data.get('last_config_dict')
    
    # –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –µ—ë –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not config_str or not config_dict:
        telegram_id = callback_query.from_user.id
        user_data = await execute_db_query(USERSDATABASE, "SELECT email FROM users WHERE telegram_id=?", (telegram_id,))
        
        if not user_data or not user_data[0][0]:
            await callback_query.answer("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ VPN —Å–Ω–∞—á–∞–ª–∞.")
            return

        emails = user_data[0][0].split(',')
        email = emails[0]
        
        db = Database(DATABASE)
        client_ids = await db.get_ids_by_email(email)
        
        if not client_ids:
            await callback_query.answer("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        config_str, config_dict = await generate_config(client_ids[0], email)
        
        if not config_str or not config_dict:
            await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(last_config_str=config_str, last_config_dict=config_dict)

    # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    connect_link = (
        f"https://vpn-connector.netlify.app/?url=vless://{config_dict['username']}@{config_dict['server_address']}:{config_dict['port']}"
        f"?type={config_dict['protocol_type']}a_n_dsecurity={config_dict['security_type']}a_n_dpbk={config_dict['public_key']}"
        f"a_n_dfp={config_dict['fingerprint']}a_n_dsni={config_dict['server_name']}a_n_dsid={config_dict['session_id']}"
        f"a_n_dspx={config_dict['routing_params']}&name={config_dict['name']}"
    )

    instruction_data = {
        'ios_instruction': {
            'title': "üì± –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è iOS",
            'text': "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN –Ω–∞ iOS –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n\n"
                   "1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Streisand –∏–∑ App Store\n"
                   "2. –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
                   "3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è' –Ω–∏–∂–µ\n"
                   "4. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n"
                   "5. –í–∫–ª—é—á–∏—Ç–µ VPN",
            'download_link': "https://apps.apple.com/app/id6450534064",
            'connect_link': connect_link
        },
        'android_instruction': {
            'title': "ü§ñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Android",
            'text': f"–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN –Ω–∞ Android –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n\n"
                   "1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Hiddify\n"
                   "2. –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
                   "3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ '+' –∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞'\n"
                   "4. –í—Å—Ç–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:\n\n"
                   f"<code>{config_str}</code>\n\n"
                   "5. –í–∫–ª—é—á–∏—Ç–µ VPN",
            'download_link': "https://play.google.com/store/apps/details?id=app.hiddify.com",
            'show_connect': False
        },
        'macos_instruction': {
            'title': "üçé –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è macOS",
            'text': "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN –Ω–∞ macOS –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n\n"
                   "1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Streisand\n"
                   "2. –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
                   "3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è' –Ω–∏–∂–µ\n"
                   "4. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n"
                   "5. –í–∫–ª—é—á–∏—Ç–µ VPN",
            'download_link': "https://apps.apple.com/app/id6450534064",
            'connect_link': connect_link
        },
        'windows_instruction': {
            'title': "üñ•Ô∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Windows",
            'text': f"–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN –Ω–∞ Windows –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n\n"
                   "1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Hiddify\n"
                   "2. –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
                   "3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ '+' –∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞'\n"
                   "4. –í—Å—Ç–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:\n\n"
                   f"<code>{config_str}</code>\n\n"
                   "5. –í–∫–ª—é—á–∏—Ç–µ VPN",
            'download_link': "https://github.com/hiddify/hiddify-next/releases/latest/download/Hiddify-Windows-Setup-x64.exe",
            'show_connect': False
        },
    }

    try:
        data = instruction_data[callback_query.data]
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(types.InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å", url=data['download_link']))
        
        if data.get('show_connect', True):
            keyboard.add(types.InlineKeyboardButton("üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", url=data['connect_link']))
            
        keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_instructions"))

        await callback_query.message.edit_text(
            f"<b>{data['title']}</b>\n\n{data['text']}",
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        bot_logger.error(f"Error in process_instruction: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.")

@dp.callback_query_handler(lambda c: c.data == "back_to_instructions")
async def back_to_instructions(callback_query: types.CallbackQuery):
    instruction_keyboard = types.InlineKeyboardMarkup(row_width=2)
    instructions = [
        ("üì± iOS", "ios_instruction"),
        ("ü§ñ Android", "android_instruction"),
        ("üçé macOS", "macos_instruction"),
        ("üñ•Ô∏è Windows", "windows_instruction")
    ]

    for name, callback in instructions:
        instruction_keyboard.insert(types.InlineKeyboardButton(text=name, callback_data=callback))

    await callback_query.message.edit_text(
        "üìö <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>",
        reply_markup=instruction_keyboard,
        parse_mode=ParseMode.HTML
    )
    await callback_query.answer()

if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup, on_shutdown=on_shutdown)